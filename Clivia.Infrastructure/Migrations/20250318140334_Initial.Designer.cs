// <auto-generated />
using System;
using Clivia.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Clivia.Infrastructure.Migrations
{
    [DbContext(typeof(CliviaDbContext))]
    [Migration("20250318140334_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Clivia.Core.Models.Asistencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("HoraEntrada")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("HoraSalida")
                        .HasColumnType("interval");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Asistencias");
                });

            modelBuilder.Entity("Clivia.Core.Models.Categoria", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Clivia.Core.Models.Checklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TipoChecklist")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("Clivia.Core.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Clivia.Core.Models.CodigoPostal", b =>
                {
                    b.Property<string>("Codigo")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("IdProvinciaEstado")
                        .HasColumnType("integer");

                    b.HasKey("Codigo");

                    b.HasIndex("IdProvinciaEstado");

                    b.ToTable("CodigosPostales");
                });

            modelBuilder.Entity("Clivia.Core.Models.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short?>("Calificacion")
                        .HasColumnType("smallint");

                    b.Property<string>("ComentarioTexto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("IdReserva")
                        .HasColumnType("integer");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdReserva");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("Clivia.Core.Models.Comodidad", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Comodidades");
                });

            modelBuilder.Entity("Clivia.Core.Models.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<int?>("IdPais")
                        .HasColumnType("integer");

                    b.Property<int?>("IdProvinciaEstado")
                        .HasColumnType("integer");

                    b.Property<string>("NumeroUnidad")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("PaisId")
                        .HasColumnType("integer");

                    b.Property<int>("ProvinciasEstadosId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CodigoPostal");

                    b.HasIndex("PaisId");

                    b.HasIndex("ProvinciasEstadosId");

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("Clivia.Core.Models.EstadoHabitacion", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("EstadosHabitacion");
                });

            modelBuilder.Entity("Clivia.Core.Models.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Detalles")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EstadoFactura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdReserva")
                        .HasColumnType("integer");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReservaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReservaId");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Clivia.Core.Models.Habitacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short?>("Capacidad")
                        .HasColumnType("smallint");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("IdCategoria")
                        .HasColumnType("smallint");

                    b.Property<short?>("IdEstadoHabitacion")
                        .HasColumnType("smallint");

                    b.Property<short?>("IdPiso")
                        .HasColumnType("smallint");

                    b.Property<int>("IdPropiedad")
                        .HasColumnType("integer");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumeroHabitacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("PrecioPorNoche")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoHabitacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdEstadoHabitacion");

                    b.HasIndex("IdPiso");

                    b.HasIndex("IdPropiedad");

                    b.ToTable("Habitaciones");
                });

            modelBuilder.Entity("Clivia.Core.Models.HabitacionFecha", b =>
                {
                    b.Property<int>("IdHabitacion")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<int?>("IdReserva")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Tarifa")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdHabitacion", "Fecha");

                    b.HasIndex("IdReserva");

                    b.ToTable("HabitacionesFechas");
                });

            modelBuilder.Entity("Clivia.Core.Models.ItemChecklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdChecklist")
                        .HasColumnType("integer");

                    b.Property<short?>("Orden")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IdChecklist");

                    b.ToTable("ItemsChecklists");
                });

            modelBuilder.Entity("Clivia.Core.Models.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoISO")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("Clivia.Core.Models.Piso", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Pisos");
                });

            modelBuilder.Entity("Clivia.Core.Models.Propiedad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdDireccion")
                        .HasColumnType("integer");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NombrePropiedad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdDireccion");

                    b.ToTable("Propiedades");
                });

            modelBuilder.Entity("Clivia.Core.Models.PropiedadComodidad", b =>
                {
                    b.Property<int>("IdPropiedad")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<short>("IdComodidad")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.HasKey("IdPropiedad", "IdComodidad");

                    b.HasIndex("IdComodidad");

                    b.ToTable("PropiedadesComodidades");
                });

            modelBuilder.Entity("Clivia.Core.Models.ProvinciaEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdPais")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdPais");

                    b.ToTable("ProvinciasEstados");
                });

            modelBuilder.Entity("Clivia.Core.Models.Resena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Calificacion")
                        .HasColumnType("smallint");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdPropiedad")
                        .HasColumnType("integer");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdPropiedad");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Resenas");
                });

            modelBuilder.Entity("Clivia.Core.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EstadoReserva")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdPropiedad")
                        .HasColumnType("integer");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("NumeroAdultos")
                        .HasColumnType("smallint");

                    b.Property<short?>("NumeroNinios")
                        .HasColumnType("smallint");

                    b.Property<decimal>("PrecioTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdPropiedad");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("Clivia.Core.Models.ResultadoChecklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaAplicacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdChecklist")
                        .HasColumnType("integer");

                    b.Property<int?>("IdHabitacion")
                        .HasColumnType("integer");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdChecklist");

                    b.HasIndex("IdHabitacion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ResultadosChecklists");
                });

            modelBuilder.Entity("Clivia.Core.Models.ResultadoItemChecklist", b =>
                {
                    b.Property<int>("IdResultadosChecklist")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("IdItemsChecklist")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Completado")
                        .HasColumnType("boolean");

                    b.HasKey("IdResultadosChecklist", "IdItemsChecklist");

                    b.HasIndex("IdItemsChecklist");

                    b.ToTable("ResultadosItemsChecklists");
                });

            modelBuilder.Entity("Clivia.Core.Models.RolUsuario", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("RolesUsuarios");
                });

            modelBuilder.Entity("Clivia.Core.Models.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Clivia.Core.Models.ServicioReserva", b =>
                {
                    b.Property<int>("IdReserva")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("IdServicio")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<short>("Cantidad")
                        .HasColumnType("smallint");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdReserva", "IdServicio");

                    b.HasIndex("IdServicio");

                    b.ToTable("ServiciosReservas");
                });

            modelBuilder.Entity("Clivia.Core.Models.Tarea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EstadoTarea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdUsuarioAsignado")
                        .HasColumnType("integer");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuarioAsignado");

                    b.ToTable("Tareas");
                });

            modelBuilder.Entity("Clivia.Core.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("EsUsuario")
                        .HasColumnType("boolean");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("IdRolUsuario")
                        .HasColumnType("smallint");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdRolUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Clivia.Core.Models.Asistencia", b =>
                {
                    b.HasOne("Clivia.Core.Models.Usuario", "Usuario")
                        .WithMany("Asistencias")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Clivia.Core.Models.CodigoPostal", b =>
                {
                    b.HasOne("Clivia.Core.Models.ProvinciaEstado", "ProvinciasEstados")
                        .WithMany("CodigosPostales")
                        .HasForeignKey("IdProvinciaEstado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProvinciasEstados");
                });

            modelBuilder.Entity("Clivia.Core.Models.Comentario", b =>
                {
                    b.HasOne("Clivia.Core.Models.Reserva", "Reserva")
                        .WithMany("Comentarios")
                        .HasForeignKey("IdReserva")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clivia.Core.Models.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reserva");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Clivia.Core.Models.Direccion", b =>
                {
                    b.HasOne("Clivia.Core.Models.CodigoPostal", "CodigosPostales")
                        .WithMany("Direcciones")
                        .HasForeignKey("CodigoPostal")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Clivia.Core.Models.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clivia.Core.Models.ProvinciaEstado", "ProvinciasEstados")
                        .WithMany()
                        .HasForeignKey("ProvinciasEstadosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodigosPostales");

                    b.Navigation("Pais");

                    b.Navigation("ProvinciasEstados");
                });

            modelBuilder.Entity("Clivia.Core.Models.Factura", b =>
                {
                    b.HasOne("Clivia.Core.Models.Reserva", "Reserva")
                        .WithMany()
                        .HasForeignKey("ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("Clivia.Core.Models.Habitacion", b =>
                {
                    b.HasOne("Clivia.Core.Models.Categoria", "Categorias")
                        .WithMany("Habitaciones")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clivia.Core.Models.EstadoHabitacion", "EstadoHabitacion")
                        .WithMany("Habitaciones")
                        .HasForeignKey("IdEstadoHabitacion")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clivia.Core.Models.Piso", "Piso")
                        .WithMany("Habitaciones")
                        .HasForeignKey("IdPiso")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clivia.Core.Models.Propiedad", "Propiedad")
                        .WithMany("Habitaciones")
                        .HasForeignKey("IdPropiedad")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categorias");

                    b.Navigation("EstadoHabitacion");

                    b.Navigation("Piso");

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("Clivia.Core.Models.HabitacionFecha", b =>
                {
                    b.HasOne("Clivia.Core.Models.Habitacion", "Habitacion")
                        .WithMany("HabitacionesFechas")
                        .HasForeignKey("IdHabitacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clivia.Core.Models.Reserva", "Reserva")
                        .WithMany("HabitacionesFechas")
                        .HasForeignKey("IdReserva")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Habitacion");

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("Clivia.Core.Models.ItemChecklist", b =>
                {
                    b.HasOne("Clivia.Core.Models.Checklist", "Checklist")
                        .WithMany("ItemsChecklists")
                        .HasForeignKey("IdChecklist")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("Clivia.Core.Models.Propiedad", b =>
                {
                    b.HasOne("Clivia.Core.Models.Direccion", "Direccion")
                        .WithMany("Propiedades")
                        .HasForeignKey("IdDireccion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("Clivia.Core.Models.PropiedadComodidad", b =>
                {
                    b.HasOne("Clivia.Core.Models.Comodidad", "Comodidades")
                        .WithMany("PropiedadesComodidades")
                        .HasForeignKey("IdComodidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clivia.Core.Models.Propiedad", "Propiedad")
                        .WithMany("PropiedadesComodidades")
                        .HasForeignKey("IdPropiedad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comodidades");

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("Clivia.Core.Models.ProvinciaEstado", b =>
                {
                    b.HasOne("Clivia.Core.Models.Pais", "Pais")
                        .WithMany("ProvinciasEstados")
                        .HasForeignKey("IdPais")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Clivia.Core.Models.Resena", b =>
                {
                    b.HasOne("Clivia.Core.Models.Propiedad", "Propiedad")
                        .WithMany("Resenas")
                        .HasForeignKey("IdPropiedad")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Clivia.Core.Models.Usuario", "Usuario")
                        .WithMany("Resenas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Propiedad");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Clivia.Core.Models.Reserva", b =>
                {
                    b.HasOne("Clivia.Core.Models.Propiedad", "Propiedad")
                        .WithMany("Reservas")
                        .HasForeignKey("IdPropiedad")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Clivia.Core.Models.Usuario", "Usuario")
                        .WithMany("Reservas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Propiedad");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Clivia.Core.Models.ResultadoChecklist", b =>
                {
                    b.HasOne("Clivia.Core.Models.Checklist", "Checklist")
                        .WithMany("ResultadosChecklists")
                        .HasForeignKey("IdChecklist")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clivia.Core.Models.Habitacion", "Habitacion")
                        .WithMany("ResultadosChecklists")
                        .HasForeignKey("IdHabitacion")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Clivia.Core.Models.Usuario", "Usuario")
                        .WithMany("ResultadosChecklists")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Checklist");

                    b.Navigation("Habitacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Clivia.Core.Models.ResultadoItemChecklist", b =>
                {
                    b.HasOne("Clivia.Core.Models.ItemChecklist", "ItemsChecklist")
                        .WithMany()
                        .HasForeignKey("IdItemsChecklist")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Clivia.Core.Models.ResultadoChecklist", "ResultadosChecklist")
                        .WithMany("ResultadosItemsChecklists")
                        .HasForeignKey("IdResultadosChecklist")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemsChecklist");

                    b.Navigation("ResultadosChecklist");
                });

            modelBuilder.Entity("Clivia.Core.Models.ServicioReserva", b =>
                {
                    b.HasOne("Clivia.Core.Models.Reserva", "Reserva")
                        .WithMany("ServiciosReservas")
                        .HasForeignKey("IdReserva")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Clivia.Core.Models.Servicio", "Servicio")
                        .WithMany("ServiciosReservas")
                        .HasForeignKey("IdServicio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reserva");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Clivia.Core.Models.Tarea", b =>
                {
                    b.HasOne("Clivia.Core.Models.Usuario", "UsuarioAsignado")
                        .WithMany("Tareas")
                        .HasForeignKey("IdUsuarioAsignado")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UsuarioAsignado");
                });

            modelBuilder.Entity("Clivia.Core.Models.Usuario", b =>
                {
                    b.HasOne("Clivia.Core.Models.RolUsuario", "RolesUsuarios")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRolUsuario")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RolesUsuarios");
                });

            modelBuilder.Entity("Clivia.Core.Models.Categoria", b =>
                {
                    b.Navigation("Habitaciones");
                });

            modelBuilder.Entity("Clivia.Core.Models.Checklist", b =>
                {
                    b.Navigation("ItemsChecklists");

                    b.Navigation("ResultadosChecklists");
                });

            modelBuilder.Entity("Clivia.Core.Models.CodigoPostal", b =>
                {
                    b.Navigation("Direcciones");
                });

            modelBuilder.Entity("Clivia.Core.Models.Comodidad", b =>
                {
                    b.Navigation("PropiedadesComodidades");
                });

            modelBuilder.Entity("Clivia.Core.Models.Direccion", b =>
                {
                    b.Navigation("Propiedades");
                });

            modelBuilder.Entity("Clivia.Core.Models.EstadoHabitacion", b =>
                {
                    b.Navigation("Habitaciones");
                });

            modelBuilder.Entity("Clivia.Core.Models.Habitacion", b =>
                {
                    b.Navigation("HabitacionesFechas");

                    b.Navigation("ResultadosChecklists");
                });

            modelBuilder.Entity("Clivia.Core.Models.Pais", b =>
                {
                    b.Navigation("ProvinciasEstados");
                });

            modelBuilder.Entity("Clivia.Core.Models.Piso", b =>
                {
                    b.Navigation("Habitaciones");
                });

            modelBuilder.Entity("Clivia.Core.Models.Propiedad", b =>
                {
                    b.Navigation("Habitaciones");

                    b.Navigation("PropiedadesComodidades");

                    b.Navigation("Resenas");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Clivia.Core.Models.ProvinciaEstado", b =>
                {
                    b.Navigation("CodigosPostales");
                });

            modelBuilder.Entity("Clivia.Core.Models.Reserva", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("HabitacionesFechas");

                    b.Navigation("ServiciosReservas");
                });

            modelBuilder.Entity("Clivia.Core.Models.ResultadoChecklist", b =>
                {
                    b.Navigation("ResultadosItemsChecklists");
                });

            modelBuilder.Entity("Clivia.Core.Models.RolUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Clivia.Core.Models.Servicio", b =>
                {
                    b.Navigation("ServiciosReservas");
                });

            modelBuilder.Entity("Clivia.Core.Models.Usuario", b =>
                {
                    b.Navigation("Asistencias");

                    b.Navigation("Comentarios");

                    b.Navigation("Resenas");

                    b.Navigation("Reservas");

                    b.Navigation("ResultadosChecklists");

                    b.Navigation("Tareas");
                });
#pragma warning restore 612, 618
        }
    }
}
